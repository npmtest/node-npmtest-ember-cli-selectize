{"/home/travis/build/npmtest/node-npmtest-ember-cli-selectize/test.js":"/* istanbul instrument in package npmtest_ember_cli_selectize */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-cli-selectize/lib.npmtest_ember_cli_selectize.js":"/* istanbul instrument in package npmtest_ember_cli_selectize */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ember_cli_selectize = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ember_cli_selectize = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-cli-selectize/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ember-cli-selectize && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ember_cli_selectize */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ember_cli_selectize\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ember_cli_selectize.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_ember_cli_selectize.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ember_cli_selectize.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_ember_cli_selectize.__dirname + '/lib.npmtest_ember_cli_selectize.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-cli-selectize/node_modules/ember-cli-selectize/index.js":"/* jshint node: true */\n'use strict';\n\nmodule.exports = {\n  name: 'ember-cli-selectize',\n  included: function(app) {\n    this._super.included.apply(this, arguments);\n\n    // If the addon has the _findHost() method (in ember-cli >= 2.7.0), we'll just\n    // use that.\n    if (typeof this._findHost === 'function') {\n      app = this._findHost();\n    }\n\n    // Otherwise, we'll use this implementation borrowed from the _findHost()\n    // method in ember-cli.\n    // Keep iterating upward until we don't have a grandparent.\n    // Has to do this grandparent check because at some point we hit the project.\n    var current = this;\n    do {\n      app = current.app || app;\n    } while (current.parent.parent && (current = current.parent));\n\n    //default theme name is 'default'\n    var options = { theme: 'default' };\n    if (app.options && app.options['ember-cli-selectize']) {\n      options = app.options['ember-cli-selectize'];\n    }\n\n    if (process.env.EMBER_CLI_FASTBOOT !== 'true') {\n      //import theme based on options\n      if (options.theme) {\n        app.import(app.bowerDirectory + '/selectize/dist/css/selectize.' + options.theme + '.css');\n      }\n\n      //import javascript\n      app.import(app.bowerDirectory + '/selectize/dist/js/standalone/selectize.js');\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-ember-cli-selectize/node_modules/ember-cli-selectize/config/environment.js":"/*jshint node:true*/\n'use strict';\n\nmodule.exports = function(/* environment, appConfig */) {\n  return { };\n};\n","/home/travis/build/npmtest/node-npmtest-ember-cli-selectize/node_modules/ember-cli-selectize/addon/components/ember-selectize.js":"import Ember from 'ember';\nimport computedPolyfill from 'ember-new-computed';\n\nconst {\n  Component,\n  computed,\n  observer,\n  run,\n  get,\n  isArray,\n  isEmpty,\n  isNone,\n  typeOf,\n  String: { camelize },\n  assert,\n  getOwner\n} = Ember;\nconst assign = Ember.assign || Ember.merge;\n\n/**\n * Ember.Selectize is an Ember View that encapsulates a Selectize component.\n * The goal is to use this as a near dropin replacement for Ember.Select.\n */\nexport default Component.extend({\n  attributeBindings: ['name', 'multiple', 'autocomplete', 'required', 'tabindex'],\n  classNames: ['ember-selectize'],\n\n  autocomplete: 'off',\n  multiple: false,\n  tabindex: 0,\n  maxItems: computed('multiple', function() {\n    return this.get('multiple') ? null : 1;\n  }),\n\n  // Allows to use prompt (like in Ember.Select) or placeholder property\n  placeholder: computed.alias('prompt'),\n  sortField: null,\n  sortDirection: 'asc',\n  tagName: 'select',\n\n  /**\n  * overrideable object paths for value and label paths\n  */\n  optionValuePath: 'content',\n  optionLabelPath: 'content',\n  optionGroupPath: 'content.group',\n\n  selection: null,\n  value: computedPolyfill('selection', {\n    get() {\n      var valuePath = this.get('_valuePath');\n      var selection = this.get('selection');\n      return valuePath && selection ? Ember.get(selection, valuePath) : selection;\n    },\n    set(key, value) {\n      return value;\n    }\n  }),\n\n  /*\n   * Contains optgroups.\n   */\n  optgroups: computed('content.[]', 'groupedContent.[]', function() {\n    var groupedContent = this.get('groupedContent');\n    if (groupedContent) {\n      return groupedContent.mapBy('label');\n    } else {\n      //compute option groups from content\n      var content = this.get('content');\n      if (!isArray(content)) { return; }\n\n      return content.reduce((previousValue, item) => {\n        return previousValue.addObject(get(item, this.get('_groupPath')));\n      }, Ember.A());\n    }\n  }),\n  /**\n   * Computes content from grouped content.\n   * If `content` is set, this computed property is overriden and never executed.\n   */\n  content: computed('groupedContent.[]', function() {\n    var groupedContent = this.get('groupedContent');\n\n    if (!groupedContent) { return; }\n\n    //concatenate all content properties in each group\n    return groupedContent.reduce((previousValue, group) => {\n      var content = get(group, 'content') || Ember.A();\n      var groupLabel = get(group, 'label');\n\n      //create proxies for each object. Selectize requires the group value to be\n      //set in the object. Use ObjectProxy to keep original object intact.\n      var proxiedContent = content.map(item => {\n        var proxy = { content: item };\n        proxy[this.get('_groupPath')] = groupLabel;\n        return Ember.ObjectProxy.create(proxy);\n      });\n\n      return previousValue.pushObjects(proxiedContent);\n    }, Ember.A());\n  }),\n\n\n  _optgroupsDidChange: observer('optgroups.[]', function() {\n    if (!this._selectize) {\n      return;\n    }\n    //TODO right now we reset option groups.\n    //Ideally we would set up an array observer and use selectize's [add|remove]OptionGroup\n    this._selectize.clearOptionGroups();\n    var optgroups = this.get('optgroups');\n    if (!optgroups) { return; }\n\n    optgroups.forEach(group => {\n      this._selectize.addOptionGroup(group, { label: group, value: group});\n    });\n  }),\n\n  /**\n  * The array of the default plugins to load into selectize\n  */\n  plugins: ['remove_button'],\n\n  /**\n  * Computed properties that hold the processed paths ('content.' replacement),\n  * as it is done on Ember.Select\n  */\n  _valuePath: computed('optionValuePath', function() {\n    return this.get('optionValuePath').replace(/^content\\.?/, '');\n  }),\n\n  _labelPath: computed('optionLabelPath', function() {\n    return this.get('optionLabelPath').replace(/^content\\.?/, '');\n  }),\n  _groupPath: computed('optionGroupPath', function() {\n    return this.get('optionGroupPath').replace(/^content\\.?/, '');\n  }),\n\n  getValueFor(item) {\n    let valuePath = this.get('_valuePath');\n    return isEmpty(valuePath) || isEmpty(item) ? item : get(item, valuePath);\n  },\n\n  getLabelFor(item) {\n    let labelPath = this.get('_labelPath');\n    return isEmpty(labelPath) || isEmpty(item) ? item : get(item, labelPath);\n  },\n\n  /**\n  * Loading feature default values.\n  * If you want to override the css class that is applied, change the `loadingClass` property.\n  */\n  loading: false,\n  loadingClass: 'loading',\n\n  /**\n  * The render function names selectize expects.\n  * We will use these to automatically infer the properties with the template and view names.\n  */\n  functionNames: ['option', 'item', 'option_create', 'optgroup_header', 'optgroup'],\n  templateSuffix: 'Template',\n  componentSuffix: 'Component',\n  functionSuffix: 'Function',\n  renderOptions: computed(function() {\n    var functionNames = this.get('functionNames');\n    //this hash will contain the render functions\n    var renderFunctions = {};\n\n    functionNames.forEach(item => {\n      // infer the function name by camelizing selectize's function and appending the function suffix (overridable)\n      var functionSuffix = this.get('functionSuffix');\n      var functionPropertyName = camelize(item) + functionSuffix;\n      var renderFunction = this.get(functionPropertyName);\n      // functions take precedence\n      if (renderFunction) {\n        renderFunctions[item] = (data, escape) => {\n          return renderFunction.call(this.get('targetObject') || this, data.data || data, escape);\n        };\n      } else {\n        // infer the view name by camelizing selectize's function and appending a view suffix (overridable)\n        var componentSuffix = this.get('componentSuffix');\n        var componentPropertyName = camelize(item) + componentSuffix;\n        var componentToRender = this.get(componentPropertyName);\n\n        if (componentToRender) {\n          // we have a view to render. set the function.\n          renderFunctions[item] = data => {\n            return this._componentToDOM(componentToRender, data.data || data);\n          };\n        }\n      }\n    });\n\n    return renderFunctions;\n  }),\n\n  selectizeOptions: computed(function() {\n    var allowCreate = this.get('create-item');\n    var multiple = this.get('multiple');\n\n    //Split the passed in plugin config into an array.\n    if (typeof this.plugins === 'string') {\n      this.plugins = this.plugins.trim().split(/[\\s,]+/);\n    }\n\n    var plugins = this.plugins.slice(0);\n\n    if (!multiple) {\n      var index = plugins.indexOf('remove_button');\n      if (index !== -1) {\n        plugins.splice(index, 1);\n      }\n    }\n\n    var options = {\n      plugins: plugins,\n      labelField: 'label',\n      valueField: 'value',\n      searchField: 'label',\n      optgroupField: 'optgroup',\n      create: allowCreate ? run.bind(this, '_create') : false,\n      onItemAdd: run.bind(this, '_onItemAdd'),\n      onItemRemove: run.bind(this, '_onItemRemove'),\n      onType: run.bind(this, '_onType'),\n      render: this.get('renderOptions'),\n      placeholder: this.get('placeholder'),\n      score: this.get('score'),\n      onBlur: this._registerAction('on-blur'),\n      onFocus: this._registerAction('on-focus'),\n      onInitialize: this._registerAction('on-init'),\n      onClear: this._registerAction('on-clear')\n    };\n\n    var generalOptions = ['delimiter', 'diacritics', 'createOnBlur',\n                          'createFilter', 'highlight', 'persist', 'openOnFocus',\n                          'maxOptions', 'maxItems', 'hideSelected',\n                          'closeAfterSelect', 'allowEmptyOption',\n                          'scrollDuration', 'loadThrottle', 'preload',\n                          'dropdownParent', 'addPrecedence', 'selectOnTab',\n                          'searchField'];\n\n    generalOptions.forEach((option) => {\n      options[option] = this.getWithDefault(option, options[option]);\n    });\n\n    options = this._mergeSortField(options);\n\n    return options;\n  }),\n\n  didInsertElement() {\n    // ensure selectize is loaded\n    assert('selectize has to be loaded', typeof this.$().selectize === 'function');\n\n    //Create Selectize's instance\n    this.$().selectize(this.get('selectizeOptions'));\n\n    //Save the created selectize instance\n    this._selectize = this.$()[0].selectize;\n\n    //Some changes to content, selection and disabled could have happened before the Component was inserted into the DOM.\n    //We trigger all the observers manually to account for those changes.\n    this._disabledDidChange();\n    this._optgroupsDidChange();\n    if(this.get('groupedContent')) {\n      this._groupedContentDidChange();\n    }\n    this._contentDidChange();\n\n    var selection = this.get('selection');\n    var value = this.get('value');\n    if (!isNone(selection)) { this._selectionDidChange(); }\n    if (!isNone(value)) { this._valueDidChange(); }\n\n    this._loadingDidChange();\n  },\n\n  willDestroyElement() {\n    //Unbind observers\n    this._contentWillChange(this.get('content'));\n    this._selectionWillChange(this.get('selection'));\n    this._groupedContentWillChange(this.get('groupedContent'));\n\n    //Invoke Selectize's destroy\n    this._selectize.destroy();\n\n    //We are no longer in DOM\n    this._selectize = null;\n  },\n\n  /**\n  * Event callback that is triggered when user creates a tag\n  */\n  _create(input, callback) {\n    // Delete user entered text\n    this._selectize.setTextboxValue('');\n    // Send create action\n\n    // allow the observers and computed properties to run first\n    run.schedule('actions', this, function() {\n      this.sendAction('create-item', input);\n    });\n    // We cancel the creation here, so it's up to you to include the created element\n    // in the content and selection property\n    callback(null);\n  },\n\n  /**\n  * Event callback for DOM events\n  */\n  _registerAction(action){\n    return run.bind(this, function() {\n      var args = Array.prototype.slice.call(arguments);\n      args.unshift(action);\n      this.sendAction.apply(this, args);\n    });\n  },\n\n  /**\n  * Event callback that is triggered when user types in the input element\n  */\n  _onType(str) {\n    this.set('filter', str);\n    run.schedule('actions', this, function() {\n      this.sendAction('update-filter', str);\n    });\n  },\n\n  /**\n  * Event callback triggered when an item is added (when something is selected)\n  * Here we need to update our selection property (if single selection) or array (if multiple selection)\n  * We also send an action\n  */\n  _onItemAdd(value) {\n    var content = this.get('content');\n    var selection = this.get('selection');\n    var multiple = this.get('multiple');\n    if (content) {\n      var obj = content.find(function(item) {\n        return (this.getValueFor(item) + '') === value;\n      }, this);\n      if (multiple && isArray(selection) && obj) {\n        let selected = selection.find((item) => {\n          return isEmpty(this.get('_valuePath')) ? item === obj : this.getValueFor(obj) === this.getValueFor(item);\n        });\n        if (!selected) {\n          this._addSelection(obj);\n        }\n\n      } else if (obj) {\n        if (!selection || (this.getValueFor(obj) !== this.getValueFor(selection))) {\n          this._updateSelection(obj);\n        }\n      }\n    }\n  },\n\n  /**\n  * Event callback triggered when an item is removed (when something is deselected)\n  * Here we need to update our selection property (if single selection, here set to null) or remove item from array (if multiple selection)\n  */\n  _onItemRemove(value) {\n    //in order to know if this event was triggered by observers or if it came from user interaction\n    if (this._removing) { return; }\n\n    var content = this.get('content');\n    var selection = this.get('selection');\n    var multiple = this.get('multiple');\n    if (content) {\n      var obj = content.find(function(item) {\n        return this.getValueFor(item) + '' === value;\n      }, this);\n      if (multiple && isArray(selection) && obj) {\n        this._removeSelection(obj);\n      } else if (!multiple) {\n        this._updateSelection(null);\n      }\n    }\n  },\n\n /**\n  * Update the selection value and send main actions\n  * In addition to emitting the selection object, a selection value is sent via `select-value` based on `optionValuePath`\n  */\n  _updateSelection(selection) {\n    this.set('selection', selection);\n\n    // allow the observers and computed properties to run first\n    run.schedule('actions', this, function() {\n      var value = this.get('value');\n      this.sendAction('select-item', selection, value);\n      this.sendAction('select-value', value);\n    });\n  },\n\n  _addSelection(obj) {\n    let val = this.getValueFor(obj);\n\n    this.get('selection').addObject(obj);\n\n    run.schedule('actions', this, function() {\n      this.sendAction('add-item', obj);\n      this.sendAction('add-value', val);\n    });\n  },\n\n  _removeSelection(obj) {\n    let val = this.getValueFor(obj);\n\n    this.get('selection').removeObject(obj);\n\n    run.schedule('actions', this, function() {\n      this.sendAction('remove-item', obj);\n      this.sendAction('remove-value', val);\n    });\n  },\n\n  /**\n  * Ember observer triggered before the selection property is changed\n  * We need to unbind any array observers if we're in multiple selection\n  */\n  _selectionWillChange(selection) {\n    var multiple = this.get('multiple');\n    if (selection && isArray(selection) && multiple) {\n      selection.removeArrayObserver(this,  {\n        willChange: 'selectionArrayWillChange',\n        didChange: 'selectionArrayDidChange'\n      });\n      var len = selection ? get(selection, 'length') : 0;\n      this.selectionArrayWillChange(selection, 0, len);\n    }\n  },\n  /**\n  * Ember observer triggered when the selection property is changed\n  * We need to bind an array observer when selection is multiple\n  */\n  _selectionDidChange: observer('selection', function() {\n\n    var selection = this.get('selection');\n    if (this._oldSelection !== selection) {\n      this._selectionWillChange(this._oldSelection);\n      this._oldSelection = selection;\n    }\n\n    if (!this._selectize) { return; }\n\n    var multiple = this.get('multiple');\n\n    if (selection) {\n      if (multiple) {\n        assert('When ember-selectize is in multiple mode, the provided selection must be an array.', isArray(selection));\n        //bind array observers to listen for selection changes\n        selection.addArrayObserver(this, {\n          willChange: 'selectionArrayWillChange',\n          didChange: 'selectionArrayDidChange'\n        });\n        //Trigger a selection change that will update selectize with the new selection\n        var len = selection ? get(selection, 'length') : 0;\n        this.selectionArrayDidChange(selection, 0, null, len);\n      } else {\n        if (selection.then) {\n          selection.then(resolved => {\n            if (resolved) {\n              // Ensure that we don't overwrite new value\n              if (get(this, 'selection') === selection) {\n                this._selectize.addItem(this.getValueFor(resolved));\n              }\n            } else {\n              //selection was changed to a falsy value. Clear selectize.\n              this._selectize.clear();\n              this._selectize.showInput();\n            }\n          });\n        } else {\n          this._selectize.addItem(this.getValueFor(selection));\n        }\n\n      }\n\n    } else {\n      //selection was changed to a falsy value. Clear selectize.\n      this._selectize.clear();\n      this._selectize.showInput();\n    }\n  }),\n\n  /**\n   * It is possible to control the selected item through its value.\n   */\n  _valueDidChange: observer('value', function() {\n    if (this.get('multiple')) { return; }\n    var content = this.get('content');\n    var value = this.get('value');\n    var selectedValue = this.getValueFor(this.get('selection'));\n    var selection;\n\n    if (value !== selectedValue) {\n      selection = content ? content.find((obj) => {\n        return value === this.getValueFor(obj);\n      }) : null;\n\n      this.set('selection', selection);\n    }\n  }),\n\n  /*\n  * Triggered before the selection array changes\n  * Here we process the removed elements\n  */\n  selectionArrayWillChange(array, idx, removedCount) {\n    this._removing = true;\n    for (var i = idx; i < idx + removedCount; i++) {\n      this.selectionObjectWasRemoved(array.objectAt(i));\n    }\n    this._removing = false;\n  },\n\n  /*\n  * Triggered after the selection array changes\n  * Here we process the inserted elements\n  */\n  selectionArrayDidChange(array, idx, removedCount, addedCount) {\n    for (var i = idx; i < idx + addedCount; i++) {\n      this.selectionObjectWasAdded(array.objectAt(i), i);\n    }\n  },\n\n  /*\n  * Function that is responsible for Selectize's item inserting logic\n  */\n  selectionObjectWasAdded(obj) {\n    if (this._selectize) {\n      this._selectize.addItem(this.getValueFor(obj));\n    }\n  },\n\n  /*\n  * Function that is responsible for Selectize's item removing logic\n  */\n  selectionObjectWasRemoved(obj) {\n    if (this._selectize) {\n      this._selectize.removeItem(this.getValueFor(obj));\n    }\n  },\n\n  /**\n  * Ember observer triggered before the content property is changed\n  * We need to unbind any array observers\n  */\n  _contentWillChange(content) {\n    if (!this._selectize) { return; }\n    if (isArray(content)) {\n      content.removeArrayObserver(this, {\n        willChange: 'contentArrayWillChange',\n        didChange: 'contentArrayDidChange'\n      });\n    }\n    //Trigger remove logic\n    var len = content ? get(content, 'length') : 0;\n    this._removing = true;\n    this.contentArrayWillChange(content, 0, len);\n    this._removing = false;\n  },\n\n  /**\n  * Ember observer triggered when the content property is changed\n  * We need to bind an array observer to become notified of its changes\n  */\n  _contentDidChange: observer('content', function() {\n    var content = this.get('content');\n    if (this._oldContent !== content) {\n      this._contentWillChange(this._oldContent);\n      this._oldContent = content;\n    }\n\n    if (!this._selectize) { return; }\n\n    if (isArray(content)) {\n      content.addArrayObserver(this, {\n        willChange: 'contentArrayWillChange',\n        didChange: 'contentArrayDidChange'\n      });\n    } else if(content && content.then) {\n      content.then(resolved => {\n        // Ensure that we don't overwrite new value\n        if (get(this, 'content') === content) {\n          this.set('content', resolved);\n        }\n      });\n    }\n    var len = content ? get(content, 'length') : 0;\n    this.contentArrayDidChange(content, 0, null, len);\n  }),\n\n  /*\n  * Triggered before the content array changes\n  * Here we process the removed elements\n  */\n  contentArrayWillChange(array, idx, removedCount) {\n    for (var i = idx; i < idx + removedCount; i++) {\n      this.objectWasRemoved(array.objectAt(i));\n    }\n\n    if (this._selectize) {\n      this._selectize.refreshOptions(this._selectize.isFocused && !this._selectize.isInputHidden);\n    }\n  },\n\n  /*\n  * Triggered after the content array changes\n  * Here we process the inserted elements\n  */\n  contentArrayDidChange(array, idx, removedCount, addedCount) {\n    for (var i = idx; i < idx + addedCount; i++) {\n      this.objectWasAdded(array.objectAt(i));\n      this.addLabelObserver(array.objectAt(i));\n    }\n\n    if (this._selectize) {\n      this._selectize.refreshOptions(this._selectize.isFocused && !this._selectize.isInputHidden);\n    }\n\n    this._selectionDidChange();\n  },\n\n  _groupedContentWillChange(groupedContent) {\n    if (!this._selectize) { return; }\n    if (isEmpty(groupedContent)) { return; }\n\n    groupedContent.forEach(group => {\n      group.get('content').removeArrayObserver(this, {\n        willChange: '_groupedContentArrayWillChange',\n        didChange: '_groupedContentArrayDidChange',\n      });\n    });\n  },\n\n  /**\n  * Ember observer triggered when the groupedContent property is changed\n  * We need to bind an array observer to become notified of each group's array changes,\n  * then notify that the parent array has changed. This is because computed properties\n  * have trouble with nested array changes.\n  */\n  _groupedContentDidChange: observer('groupedContent', function() {\n    var groupedContent = this.get('groupedContent');\n    if (this._oldGroupedContent !== groupedContent) {\n      this._groupedContentWillChange(this._oldGroupedContent);\n      this._oldGroupedContent = groupedContent;\n    }\n\n    if (!this._selectize) {\n      return;\n    }\n    if (isEmpty(groupedContent)) { return; }\n\n    //var willChangeWrapper = run.bind(this, function() { this.groupedContentArrayWillChange.apply(this, arguments); });\n    //var didChangeWrapper = run.bind(this, function() { this.groupedContentArrayDidChange.apply(this, arguments); });\n\n    groupedContent.forEach(group => {\n      group.get('content').addArrayObserver(this, {\n        willChange: '_groupedContentArrayWillChange',\n        didChange: '_groupedContentArrayDidChange',\n      });\n    });\n    var len = groupedContent ? get(groupedContent, 'length') : 0;\n    this._groupedContentArrayDidChange(groupedContent, 0, null, len);\n  }),\n\n  /*\n  * Triggered before the grouped content array changes\n  * Here we process the removed elements\n  */\n  _groupedContentArrayWillChange() {},\n\n  /*\n  * Triggered after the grouped content array changes\n  * Here we process the inserted elements\n  */\n  _groupedContentArrayDidChange() {\n    this.notifyPropertyChange('groupedContent.[]');\n  },\n\n  /*\n  * Function that is responsible for Selectize's option inserting logic\n  * If the option is an object or Ember instance, we set an observer on the label value of it.\n  * This way, we can later update the label of it.\n  * Useful for dealing with objects that 'lazy load' some properties/relationships.\n  */\n  objectWasAdded(obj) {\n    var data = {};\n    var sortField = this.get('sortField');\n\n    if (typeOf(obj) === 'object' || typeOf(obj) === 'instance') {\n      data = {\n        label: this.getLabelFor(obj),\n        value: this.getValueFor(obj),\n        data: obj\n      };\n\n      if (sortField) {\n        if (isArray(sortField)) {\n          sortField.forEach(function(field) {\n            data[field.field] = get(obj, field.field);\n          });\n        } else {\n          data[sortField] = get(obj, sortField);\n        }\n      }\n\n      if (get(obj, this.get('_groupPath'))) {\n        data.optgroup = get(obj, this.get('_groupPath'));\n      }\n\n    } else {\n      data = {\n        label: obj,\n        value: obj,\n        data: obj\n      };\n\n      if (sortField && !isArray(sortField)) {\n        data[sortField] = obj;\n      }\n    }\n\n    if (this._selectize && data.label) {\n      this._selectize.addOption(data);\n    }\n  },\n\n  addLabelObserver(obj) {\n    //Only attach observer if the label is a property of an object\n    if (typeOf(obj) === 'object' || typeOf(obj) === 'instance') {\n      Ember.addObserver(obj, this.get('_labelPath'), this, '_labelDidChange');\n    }\n  },\n\n  /*\n  * Function that is responsible for Selectize's option removing logic\n  */\n  objectWasRemoved(obj) {\n    if (typeOf(obj) === 'object' || typeOf(obj) === 'instance') {\n      Ember.removeObserver(obj, this.get('_labelPath'), this, '_labelDidChange');\n    }\n    if (this._selectize) {\n      this._selectize.removeOption(this.getValueFor(obj));\n    }\n  },\n\n  /*\n  * Ember Observer that triggers when an option's label changes.\n  * Here we need to update its corresponding option with the new data\n  */\n  _labelDidChange(sender) {\n    if (!this._selectize) { return; }\n    var data = {\n      label: this.getLabelFor(sender),\n      value: this.getValueFor(sender),\n      data: sender\n    };\n\n    if(this._selectize.getOption(data.value).length !== 0) {\n      this._selectize.updateOption(data.value, data);\n    } else {\n      this.objectWasAdded(sender);\n    }\n  },\n\n  /*\n  * Observer on the disabled property that enables or disables selectize.\n  */\n  _disabledDidChange: observer('disabled', function() {\n    if (!this._selectize) { return; }\n    var disable = this.get('disabled');\n    if (disable) {\n      this._selectize.disable();\n    } else {\n      this._selectize.enable();\n    }\n  }),\n\n  /*\n  * Observer on the placeholder property that updates selectize's placeholder.\n  */\n  _placeholderDidChange: observer('placeholder', function() {\n    if (!this._selectize) { return; }\n    var placeholder = this.get('placeholder');\n    this._selectize.settings.placeholder = placeholder;\n    this._selectize.updatePlaceholder();\n  }),\n\n  /*\n  * Observer on the loading property.\n  * Here we add/remove a css class, similarly to how selectize does.\n  */\n  _loadingDidChange: observer('loading', function() {\n    var loading = this.get('loading');\n    var loadingClass = this.get('loadingClass');\n    if (loading) {\n      this._selectize.$wrapper.addClass(loadingClass);\n    } else {\n      this._selectize.$wrapper.removeClass(loadingClass);\n    }\n  }),\n\n  _lookupComponent(name) {\n    let owner = getOwner(this);\n    let componentLookupKey = `component:${name}`;\n    let layoutLookupKey = `template:components/${name}`;\n    let layout = owner._lookupFactory(layoutLookupKey);\n    let component = owner._lookupFactory(componentLookupKey);\n\n    if (layout && !component) {\n      owner.register(componentLookupKey, Component);\n      component = owner._lookupFactory(componentLookupKey);\n    }\n\n    return { component, layout };\n  },\n\n  _componentToDOM(componentName, data) {\n    let { component, layout } = this._lookupComponent(componentName);\n\n    assert(`ember-selectize could not find a component named \"${componentName}\" in your Ember application.`, component);\n\n    let attrs = { data };\n\n    if (layout) {\n      attrs.layout = layout;\n    }\n\n    let componentInstance = component.create(attrs);\n\n    let container = document.createElement('div');\n    componentInstance.appendTo(container);\n\n    return container;\n  },\n\n  _mergeSortField(options) {\n    var sortField = this.get('sortField');\n    if (sortField) {\n      var sortArray = this._getSortArray(sortField);\n      assign(options, { sortField: sortArray });\n    }\n    return options;\n  },\n\n  _getSortArray(sortField) {\n    if (isArray(sortField)) {\n      return sortField;\n    } else {\n      return [{\n        field: sortField,\n        direction: this.get('sortDirection')\n      }];\n    }\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-selectize/node_modules/ember-cli-selectize/app/components/ember-selectize.js":"import EmberSelectizeComponent from 'ember-cli-selectize/components/ember-selectize';\n\nexport default EmberSelectizeComponent;\n"}